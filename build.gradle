import org.hidetake.gradle.swagger.generator.GenerateSwaggerUI

buildscript {
	ext {
		restdocsApiSpecVersion = '0.18.2'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id "jacoco"

	id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
	id 'org.hidetake.swagger.generator' version '2.18.2'
}

jacoco {
	toolVersion = "0.8.13"
}

group = 'com.jelly'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testRuntimeOnly 'com.h2database:h2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-restassured'
	testImplementation "com.epages:restdocs-api-spec-restassured:${restdocsApiSpecVersion}"
	testImplementation "com.epages:restdocs-api-spec-mockmvc:${restdocsApiSpecVersion}"
	testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc"
	testImplementation 'io.rest-assured:rest-assured'

	swaggerUI 'org.webjars:swagger-ui:4.11.1'
}

test {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
	reports {
		html.required = true

		html.destination file("$buildDir/jacoco/index.html")
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							'**/*Application*',
							'**/*Response*',
							'**/*Request*',
					])
				})
		)
	}

	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			element = "CLASS"

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.9
			}
			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 200
			}

			excludes = [
					'*.*Application',
					'*.*Response',
					'*.*Request',
			]
		}
	}
}

openapi3 {
	servers = [
			{
				url = "http://localhost:8080"
			}
	]
	title = "찌릿 API Docs"
	description = "찌릿 API 명세서"
	version = "1.0.0"
	format = "yaml"
}

swaggerSources {
	jjirit {
		setInputFile(file("build/api-spec/openapi3.yaml"))
	}
}

tasks.withType(GenerateSwaggerUI) {
	dependsOn 'openapi3'
}

generateSwaggerUIJjirit {
	doLast {
		copy {
			from outputDir.toPath()
			into "src/main/resources/static/docs/"
		}
	}
}

test {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

build {
	dependsOn generateSwaggerUIJjirit
}

bootJar {
	dependsOn generateSwaggerUIJjirit
}